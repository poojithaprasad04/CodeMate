// src/App.js
import React, { useState } from "react";
import Header from "./components/Header";
import ChatWindow from "./components/ChatWindow";
import InputBox from "./components/InputBox";
import "./App.css";

function App() {
  const [messages, setMessages] = useState([]);
  const [loading, setLoading] = useState(false); // State to track loading

  const handleSend = async (text) => {
    // Add user's message
    setMessages((prev) => [...prev, { sender: "user", text }]);
    setLoading(true); // Set loading to true when message is sent

    // Send the message to the backend (Flask) and get the response
    try {
      const response = await fetch("http://localhost:5000/api/chat", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ message: text }),
      });

      const data = await response.json();

      // Add CodeMate's response
      setMessages((prev) => [
        ...prev,
        { sender: "codemate", text: data.reply },
      ]);
    } catch (error) {
      console.error("Error communicating with backend:", error);
      setMessages((prev) => [
        ...prev,
        { sender: "codemate", text: "Sorry, something went wrong." },
      ]);
    } finally {
      setLoading(false); // Set loading to false after the response is received
    }
  };

  return (
    <div className="app">
      <Header />
      <ChatWindow messages={messages} loading={loading} />{" "}
      {/* Pass loading state */}
      <InputBox onSend={handleSend} />
    </div>
  );
}

export default App;

/* src/App.css */
.app {
  display: flex;
  flex-direction: column;
  height: 100vh;
}

body,
html,
#root {
  margin: 0;
  padding: 0;
  height: 100%;
  font-family: Arial, sans-serif;
}

// src/components/ChatWindow.js
import React from 'react';
import Message from './Message';
import './ChatWindow.css';

const ChatWindow = ({ messages, loading }) => {
  return (
    <div className="chat-window">
      {messages.map((message, index) => (
        <Message key={index} sender={message.sender} text={message.text} />
      ))}
      {loading && <div className="loading">CodeMate is typing...</div>} {/* Display loading state */}
    </div>
  );
};

export default ChatWindow;


/* src/components/ChatWindow.css */
.chat-window {
  flex: 1;
  padding: 1rem;
  overflow-y: auto;
  background-color: #f5f5f5;
  display: flex;
  flex-direction: column;
}

.loading {
  font-style: italic;
  background-color: #fff;
  align-self: flex-start;
  background-color: #ffffff;
  border-radius: 10px 10px 10px 0;
  padding: 0.5rem;
  max-width: 94%;
}

// src/components/Header.js
import React from "react";
import "./Header.css"; // We'll create this CSS file next

const Header = () => {
  return (
    <header className="header">
      <h1>&lt;/&gt; CodeMate</h1>
    </header>
  );
};

export default Header;


/* src/components/Header.css */
.header {
  background-color: #4a90e2;
  color: white;
  padding: 1rem;
  text-align: center;
  font-size: 1rem;
  font-weight: bold;
}

.header h1{
    margin: 0;
}


// src/components/InputBox.js
import React, { useState } from "react";
import "./InputBox.css";

const InputBox = ({ onSend }) => {
  const [input, setInput] = useState("");

  const handleSend = () => {
    if (input.trim() !== "") {
      onSend(input);
      setInput("");
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === "Enter") {
      handleSend();
    }
  };

  return (
    <div className="input-box">
      <input
        type="text"
        id="query"
        placeholder="Type your message..."
        value={input}
        onChange={(e) => setInput(e.target.value)}
        onKeyPress={handleKeyPress}
      />
      <button onClick={handleSend}>Send</button>
    </div>
  );
};

export default InputBox;


/* src/components/InputBox.css */
.input-box {
  display: flex;
  padding: 10px;
  background-color: #eee;
}

.input-box input {
  flex: 1;
  padding: 10px;
  border: none;
  border-radius: 4px;
  font-size: 16px;
  outline-color: #4a90e2;
}

.input-box button {
  margin-left: 10px;
  padding: 10px 20px;
  background-color: #4a90e2;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.input-box button:hover {
  background-color: #357ab8;
}


import React, { useState } from "react";
import ReactMarkdown from "react-markdown";
import { Prism as SyntaxHighlighter } from "react-syntax-highlighter";
import { coldarkDark } from "react-syntax-highlighter/dist/esm/styles/prism";
import "./Message.css";

const Message = ({ sender, text }) => {
  const [copiedCodeBlockIndex, setCopiedCodeBlockIndex] = useState(null);

  // Function to copy the code content to the clipboard
  const copyToClipboard = (codeContent, index) => {
    navigator.clipboard.writeText(codeContent);
    setCopiedCodeBlockIndex(index);
    setTimeout(() => setCopiedCodeBlockIndex(null), 1000); // Reset after 1 second
  };

  return (
    <div className={`message ${sender === "user" ? "user" : "codemate"}`}>
      <div className="message-sender">
        {sender === "user" ? "You" : "CodeMate"}
      </div>

      <div className="message-text">
        <ReactMarkdown
          components={{
            code({ inline, className, children, ...props }) {
              const match = /language-(\w+)/.exec(className || "");
              const codeContent = String(children).replace(/\n$/, "");
              const index = props.node.position.start.offset;

              return !inline && match ? (
                <div className="code-container">
                  <SyntaxHighlighter
                    style={coldarkDark}
                    language={match[1]}
                    PreTag="div"
                    {...props}
                  >
                    {codeContent}
                  </SyntaxHighlighter>
                  <button
                    className="copy-button"
                    onClick={() => copyToClipboard(codeContent, index)}
                  >
                    {copiedCodeBlockIndex === index ? "Copied!" : "Copy"}
                  </button>
                </div>
              ) : (
                <code className={className} {...props}>
                  {children}
                </code>
              );
            },
          }}
        >
          {text}
        </ReactMarkdown>
      </div>
    </div>
  );
};

export default Message;


.message {
  margin-bottom: 15px;
  display: flex;
  flex-direction: column;
}

.message.user {
  align-self: flex-end;
  background-color: #4a90e2;
  color: #fff;
  border-radius: 10px 10px 0 10px;
  padding: 0.5rem;
  max-width: 80%;
}

.message.codemate {
  align-self: flex-start;
  background-color: #ffffff;
  border-radius: 10px 10px 10px 0;
  padding: 0.5rem;
  max-width: 95%;
}

.message-sender {
  font-size: 12px;
  color: #fff;
  margin-bottom: 5px;
}

.message.codemate .message-sender {
  color: #555;
}

.message.user .message-sender {
  color: #eee;
}

.message-text {
  font-size: 16px;
}

.code-container {
  position: relative;
  margin-top: 10px;
}

.copy-button {
  position: absolute;
  top: 10px;
  right: 10px;
  background-color: #4a90e2;
  color: white;
  border: none;
  padding: 5px 10px;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.copy-button:hover {
  background-color: #357abd;
}

